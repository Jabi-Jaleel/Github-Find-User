{"version":3,"sources":["image/git-img.png","image/git-pro.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","fetchdata","event","preventDefault","console","log","target","username","value","axios","get","state","api","then","response","setState","users","data","id","catch","error","alert","this","className","src","gitimg","alt","onSubmit","type","placeholder","name","avatar_url","location","followers","public_repos","following","href","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,qC,iGCA3CD,EAAOC,QAAU,IAA0B,qC,6JCMtBC,G,wDACnB,aAAe,IAAD,8BACZ,gBAkBFC,UAAY,SAACC,GACXA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOC,SAASC,OAClCC,IACGC,IAAI,EAAKC,MAAMC,IAAMV,EAAMI,OAAOC,SAASC,OAC3CK,MAAK,SAACC,GACL,EAAKC,SAAS,CACZC,MAAOF,EAASG,OAElBb,QAAQC,IAAIS,EAASG,MACrBb,QAAQC,IAAI,EAAKM,MAAMK,MAAME,OAE9BC,OAAM,SAAUC,GAEfC,MAAM,2CA/BV,EAAKV,MAAQ,CACXK,MAAO,GACPT,SAAU,WACVK,IAAK,iCALK,E,gEASO,IAAD,OAClBH,IAAMC,IAAIY,KAAKX,MAAMC,IAAMU,KAAKX,MAAMJ,UAAUM,MAAK,SAACC,GACpD,EAAKC,SAAS,CACZC,MAAOF,EAASG,OAElBb,QAAQC,IAAIS,EAASG,MACrBb,QAAQC,IAAI,EAAKM,MAAMK,MAAME,S,+BAuB/B,OACE,oCACE,0BAAMK,UAAU,kBACd,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAQC,IAAI,MAExB,0BAAMH,UAAU,cAAcI,SAAUL,KAAKrB,WAC3C,2BACE2B,KAAK,OACLC,YAAY,iCACZC,KAAK,cAGT,yBAAKP,UAAU,qBACb,yBAAKC,IAAKF,KAAKX,MAAMK,MAAMe,WAAYL,IAAI,KAC3C,4BAAKJ,KAAKX,MAAMK,MAAMc,MACtB,4BAAKR,KAAKX,MAAMK,MAAMgB,WAExB,yBAAKT,UAAU,iBACb,yBAAKA,UAAU,cACb,4BAAKD,KAAKX,MAAMK,MAAMiB,WACtB,0CAEF,yBAAKV,UAAU,cACb,4BAAKD,KAAKX,MAAMK,MAAMkB,cACtB,2CAEF,yBAAKX,UAAU,cACb,4BAAKD,KAAKX,MAAMK,MAAMmB,WACtB,4CAIN,gCACE,sDAC0B,IACxB,uBAAGC,KAAK,0CAAR,uB,GA3EqBC,cCMbC,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMgC,c","file":"static/js/main.3b383580.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/git-img.cf7a9ac0.png\";","module.exports = __webpack_public_path__ + \"static/media/git-pro.a0f2d940.png\";","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport gitimg from \"./image/git-img.png\";\nimport gitpro from \"./image/git-pro.png\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      username: \"jbscript\",\n      api: \"https://api.github.com/users/\",\n    };\n  }\n\n  componentDidMount() {\n    axios.get(this.state.api + this.state.username).then((response) => {\n      this.setState({\n        users: response.data,\n      });\n      console.log(response.data);\n      console.log(this.state.users.id);\n    });\n  }\n\n  fetchdata = (event) => {\n    event.preventDefault();\n    console.log(event.target.username.value);\n    axios\n      .get(this.state.api + event.target.username.value)\n      .then((response) => {\n        this.setState({\n          users: response.data,\n        });\n        console.log(response.data);\n        console.log(this.state.users.id);\n      })\n      .catch(function (error) {\n        // handle error\n        alert(\"Please enter valid Github username \");\n      });\n  };\n\n  render() {\n    return (\n      <>\n        <main className=\"main-container\">\n          <div className=\"git-image\">\n            <img src={gitimg} alt=\"\" />\n          </div>\n          <form className=\"searchfield\" onSubmit={this.fetchdata}>\n            <input\n              type=\"text\"\n              placeholder=\"Type Github username and enter\"\n              name=\"username\"\n            />\n          </form>\n          <div className=\"profile-container\">\n            <img src={this.state.users.avatar_url} alt=\"\" />\n            <h3>{this.state.users.name}</h3>\n            <h6>{this.state.users.location}</h6>\n          </div>\n          <div className=\"git-container\">\n            <div className=\"git-detail\">\n              <h5>{this.state.users.followers}</h5>\n              <h6>Followers</h6>\n            </div>\n            <div className=\"git-detail\">\n              <h5>{this.state.users.public_repos}</h5>\n              <h6>Repositary</h6>\n            </div>\n            <div className=\"git-detail\">\n              <h5>{this.state.users.following}</h5>\n              <h6>Following</h6>\n            </div>\n          </div>\n        </main>\n        <footer>\n          <h6>\n            Designed & Developed by{\" \"}\n            <a href=\"https://www.instagram.com/jabi_jaleel/\">Jabir Jaleel</a>\n          </h6>\n        </footer>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}